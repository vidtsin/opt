from odoo import models,fields,api,_
from datetime import datetime, timedelta
from datetime import datetime
from dateutil.relativedelta import relativedelta

from odoo.exceptions import ValidationError
from calendar import Calendar


class crmlead(models.Model):
    _inherit = 'crm.lead'




    name = fields.Char('Opportunity', required=False, invisible=1)





    @api.model
    def retrieve_sales_dashboard(self):
        """ Fetch data to setup Sales Dashboard """

        result = {
            'meeting': {
                'today': 0,
                'next_7_days': 0,
            },
            'activity': {
                'today': 0,
                'overdue': 0,
                'next_7_days': 0,
            },
            'closing': {
                'today': 0,
                'overdue': 0,
                'next_7_days': 0,
            },
            'done': {
                'this_month': 0,
                'last_month': 0,
            },
            'won': {
                'this_month': 0,
                'last_month': 0,
            },



            'new_opportunity':0 ,

            'lost_opportunity':0,

            'opportunity_total':0,

            'prospect_total':0,

            'admitted_total':0,

            'enrolled_total':0,

            'delayed_total': 0,

            'lead_con_ratio':0,

            'lead_to_sales_ratio':0,

            'lead_to_opp_ratio':0,

            'lead_to_opp_ratio1':0,

            # 'lead_to_sale_ratio': 0,
            #
            # 'opp_to_prospect_ratio':0,
            #
            # 'no_follow':0,
            #
            # 'enrolled_last_three_month':0,
            #
            # 'rev_last_three_months': 0,
            #
            # 'rate_last_three_months':0,
            #
            # 'prospect_after_three_month':0,
            #
            # 'rev_after_three_months':0,
            #
            # 'lead_diploma_local_per_weeks':0,
            #
            # 'lead_diploma_inter_per_weeks':0,
            #
            # 'lead_certificate_local_per_weeks':0,
            #
            # 'lead_certificate_inter_per_weeks':0,
            #
            # 'lead_diploma_total_per_weeks':0,
            #
            # 'lead_certification_total_per_weeks':0,
            #
            # 'lead_local_total_per_weeks':0,
            #
            # 'lead_international_total_per_weeks':0,
            #
            # 'lead_grand_total_per_weeks':0,
            #
            # 'oppo_diploma_local_per_weeks':0,
            #
            # 'oppo_diploma_inter_per_weeks': 0,
            #
            # 'oppo_diploma_total_per_weeks': 0,
            #
            # 'oppo_certificate_local_per_weeks': 0,
            #
            # 'oppo_certificate_inter_per_weeks': 0,
            #
            # 'oppo_certification_total_per_weeks': 0,
            #
            # 'oppo_local_total_per_weeks': 0,
            #
            # 'oppo_international_total_per_weeks': 0,
            #
            # 'oppo_grand_total_per_weeks': 0,
            #
            # 'lead_diploma_local_per_months':0,
            #
            # 'lead_diploma_inter_per_months':0,
            #
            # 'lead_certificate_local_per_months':0,
            #
            # 'lead_certificate_inter_per_months':0,
            #
            # 'lead_diploma_total_per_months':0,
            #
            # 'lead_certification_total_per_months':0,
            #
            # 'lead_local_total_per_months':0,
            #
            # 'lead_international_total_per_months':0,
            #
            # 'lead_grand_total_per_months':0,
            #
            # 'oppo_diploma_local_per_months':0,
            #
            # 'oppo_diploma_inter_per_months': 0,
            #
            # 'oppo_diploma_total_per_months': 0,
            #
            # 'oppo_certificate_local_per_months': 0,
            #
            # 'oppo_certificate_inter_per_months': 0,
            #
            # 'oppo_certification_total_per_months': 0,
            #
            # 'oppo_local_total_per_months': 0,
            #
            # 'oppo_international_total_per_months': 0,
            #
            # 'oppo_grand_total_per_months': 0,
            #
            #
            #
            #
            #
            # 'lead_diploma_local_per_year': 0,
            #
            # 'lead_diploma_inter_per_year': 0,
            #
            # 'lead_certificate_local_per_year': 0,
            #
            # 'lead_certificate_inter_per_year': 0,
            #
            # 'lead_diploma_total_per_year': 0,
            #
            # 'lead_certification_total_per_year': 0,
            #
            # 'lead_local_total_per_year': 0,
            #
            # 'lead_international_total_per_year': 0,
            #
            # 'lead_grand_total_per_year': 0,
            #
            # 'oppo_diploma_local_per_year': 0,
            #
            # 'oppo_diploma_inter_per_year': 0,
            #
            # 'oppo_diploma_total_per_year': 0,
            #
            # 'oppo_certificate_local_per_year': 0,
            #
            # 'oppo_certificate_inter_per_year': 0,
            #
            # 'oppo_certification_total_per_year': 0,
            #
            # 'oppo_local_total_per_year': 0,
            #
            # 'oppo_international_total_per_year': 0,
            #
            # 'oppo_grand_total_per_year': 0,




















        }
        current_date=datetime.now()
        lead_gen_date=current_date-relativedelta(days=1)
        opp_gen_date=current_date-relativedelta(days=1)
        new_lead_date=datetime.strftime(lead_gen_date,"%Y-%m-%d")
        new_oppo_date=datetime.strftime(opp_gen_date,"%Y-%m-%d")
        one_year=current_date-relativedelta(years=1)
        one_month=current_date-relativedelta(months=1)
        one_week=current_date-relativedelta(weeks=1)
        bf_three_month=current_date-relativedelta(months=3)
        af_three_month=current_date+relativedelta(months=3)
        af_three_month=current_date+relativedelta(months=3)
        date1=datetime.strftime(one_month,"%Y-%m-%d")
        date2=datetime.strftime(bf_three_month,"%Y-%m-%d")
        date3=datetime.strftime(af_three_month,"%Y-%m-%d")
        date4=datetime.strftime(one_week,"%Y-%m-%d")
        date5=datetime.strftime(one_year,"%Y-%m-%d")


        # #New leads generated records
        #
        # leads=self.search([
        #     ('new_lead','=',True)])
        # if leads:
        #     result['new_leads']=len(leads)
        #
        #
        # # New opportunity generated record
        #
        # opportunitys = self.search([
        #     ('create_date', '>=', date1),
        #     ('new_lead', '!=', True),])
        # if opportunitys:
        #
        #     result['new_opportunity'] = len(opportunitys)
        #
        #
        # #Opportunities records
        #
        # opportunities=self.search([('stage_id.name','=','Opportunity'),('type','!=','lead')])
        # if opportunities:
        #     result['opportunity_total']=len(opportunities)
        #
        # #Prospects records
        #
        # prospects=self.search([('stage_id.name','=','Prospect')])
        # if prospects:
        #     result['prospect_total']=len(prospects)
        #
        #
        # # Admitted  records
        #
        # admitted=self.search([('stage_id.name','=','Admitted')])
        # if admitted:
        #     result['admitted_total']=len(admitted)
        #
        #
        # # Enrolled records
        #
        # enrolled=self.search([('stage_id.name','=','Enrolled')])
        # if enrolled:
        #
        #     result['enrolled_total']=len(enrolled)
        #
        #
        # # Delayed  records
        #
        # delayed=self.search([('stage_id.name','=','Delayed')])
        # if delayed:
        #     result['delayed_total']=len(delayed)
        #
        #
        # # Lost records
        #
        # lost = self.search([('stage_id.name','=','Lost')])
        # if lost:
        #     result['lost_opportunity'] = len(lost)


        # Lead Opportunity Ratio

        leads=self.search([
            ('create_date','>=',date1),
            ('type','=','lead'),
        ])
        ld=len(leads)
        if leads:
            opportunity = self.search([
                ('type','!=','lead'),
                # ('stage_id.name','=','Opportunity'),
            ])
            opp=len(opportunity)
            ratio=str((opp*100)/ld)
            opp_ratio=ratio +'%'
            result['lead_to_opp_ratio']=opp_ratio

        # Lead to Sales Ratio

        leads = self.search([
            ('create_date', '>=', date1),
            ('type', '=', 'lead'),
        ])
        ld = len(leads)
        if leads:
            opportunity = self.search([
                ('type', '!=', 'lead'),
                ('stage_id.name','=','Closed'),
            ])
            sales = len(opportunity)
            ratio = str((sales * 100) / ld)
            sale_ratio = ratio + '%'
            result['lead_to_sales_ratio'] = sale_ratio


        retrieve_dip_data = """select p.product_name,c.type,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id  group by c.type,p.product_name ORDER BY count desc limit 5 ;"""
        self.env.cr.execute(retrieve_dip_data)
        lead_by_diploma = self.env.cr.dictfetchall()
        lead_by_diploma_list=[]
        opportunity = lead = 0
        if lead_by_diploma[0]['type'] == 'opportunity':
            opportunity = lead_by_diploma[0]['count']
        else:
            lead = lead_by_diploma[0]['count']
        first_rec={'product_name':lead_by_diploma[0]['product_name'],'lead':lead,'opportunity':opportunity}
        lead_by_diploma_list.append(first_rec)
        for rec in lead_by_diploma:
            rec_exists=False
            for recs in lead_by_diploma_list:
                if rec['product_name'] ==recs['product_name']:
                    rec_exists=True
                    if rec['type'] == 'opportunity':
                        recs['opportunity'] = rec['count']
                    else:
                        recs['lead'] = rec['count']
            if not rec_exists:
                opportunity = lead = 0
                if rec['type'] == 'opportunity':
                    opportunity = rec['count']
                else:
                    lead = rec['count']
                lead_by_diploma_list.append(
                    {'product_name': rec['product_name'], 'opportunity': opportunity, 'lead': lead})


        if len(lead_by_diploma_list) == 0:
            return '0'
        else:
            print("adasdfsfsdfdsfsd", lead_by_diploma_list)
            result['lead_to_opp_ratio1']= lead_by_diploma_list












        return result




    @api.model
    def retrieve_monthly_lead_product_data(self):
        today = datetime.today()
        months=today-relativedelta(months=1)
        retrieve_mon_lead_product_data="""select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date <= '%s' group by c.type,p.product_name ORDER BY count desc limit 5 ;"""%(months,today)
        self.env.cr.execute(retrieve_mon_lead_product_data)
        lead_monthly_product=self.env.cr.dictfetchall()
        if len(lead_monthly_product)== 0:
            return 'None'
        else:
            print("adasdfsfsdfdsfsd",lead_monthly_product)
            return lead_monthly_product

    @api.model
    def retrieve_monthly_lead_source_data(self):
        today = datetime.today()
        months = today - relativedelta(months=1)
        retrieve_mon_lead_source_data = """select source_of_lead,count(*) from crm_lead where type='lead' AND create_date >='%s' AND create_date <='%s' group by source_of_lead ORDER BY count desc limit 5;""" % (
        months, today)
        self.env.cr.execute(retrieve_mon_lead_source_data)
        lead_monthly_source = self.env.cr.dictfetchall()
        if len(lead_monthly_source) == 0:
            return 'None'
        else:
            print("adasdfsfsdfdsfsd", lead_monthly_source)
            return lead_monthly_source

    @api.model
    def retrieve_opportunity_product_data(self):

        retrieve_opportunity_product_data = """select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='opportunity' group by c.type,p.product_name ORDER BY count ;"""
        self.env.cr.execute(retrieve_opportunity_product_data)
        opportunity_product = self.env.cr.dictfetchall()
        if len(opportunity_product) == 0:
            return 'None'
        else:
            print("adasdfsfsdfdsfsd", opportunity_product)
            return opportunity_product

    @api.model
    def retrieve_leads_product_data(self):


    @api.model
    def retrieve_lead_by_diploma_month_data(self):
        retrieve_lead_by_diploma_month_data="""select to_char(c.create_date,'Mon-YYYY') create_date, count(c.id) from crm_lead c join program_details p on c.program = p.id where p.lead_by_diploma=True group by to_char(c.create_date,'Mon-YYYY') ORDER BY create_date limit 5;"""
        self.env.cr.execute(retrieve_lead_by_diploma_month_data)
        lead_by_diploma_month=self.env.cr.dictfetchall()
        # list=sorted(lead_by_diploma_month)
        # list=sorted(lead_by_diploma_month, key=lambda x: datetime.datetime.strptime(''.join(x), '%Y%m'))
        # print"dsdsadasdasd",list
        if len(lead_by_diploma_month) == 0:
            return 'None'
        else:
            print"month dattattttaaa",lead_by_diploma_month
            return lead_by_diploma_month

    @api.model
    def retrieve_lead_by_certification_month_data(self):
        retrieve_lead_by_certification_month_data = """select to_char(c.create_date,'Mon-YYYY') create_date, count(c.id) from crm_lead c join program_details p on c.program = p.id where p.lead_by_certification=True group by to_char(c.create_date,'Mon-YYYY') ORDER BY create_date limit 5;"""
        self.env.cr.execute(retrieve_lead_by_certification_month_data)
        lead_by_certification_month = self.env.cr.dictfetchall()
        if len(lead_by_certification_month) == 0:
            return 'None'
        else:
            print"month dattattttaaa", lead_by_certification_month
            return lead_by_certification_month




    @api.model
    def retrieve_source_by_diploma_data(self):
        retrieve_source_by_diploma_data="""select c.source_url,count(c.id) from crm_lead c join program_details p on c.program =p .id where p.lead_by_diploma=True group by c.source_url ORDER BY count limit 5;"""
        self.env.cr.execute(retrieve_source_by_diploma_data)
        lead_source_by_diploma=self._cr.dictfetchall()
        if len(lead_source_by_diploma) == 0:
            return 'None'
        else:
            print'source diplomaaaaaaaa',lead_source_by_diploma
            return lead_source_by_diploma

    @api.model
    def retrieve_source_by_cerification_data(self):
        retrieve_source_by_cerification_data = """select c.source_url,count(c.id) from crm_lead c join program_details p on c.program =p .id where p.lead_by_certification=True group by c.source_url ORDER BY count limit 5;"""
        self.env.cr.execute(retrieve_source_by_cerification_data)
        lead_source_by_certification = self._cr.dictfetchall()
        if len(lead_source_by_certification) == 0:
            return 'None'
        else:
            print'source certificationnnn', lead_source_by_certification
            return lead_source_by_certification

    @api.model
    def retrieve_admitted_data(self):
        dict1={}
        dict2={}
        dict3={}
        admitted_quaterly=[]

        current_date = datetime.now()
        month1 = current_date - relativedelta(months=4)
        month2 = month1 - relativedelta(months=4)
        month3 = month2 - relativedelta(months=4)

        retrieve_admitted_data1= """select team_id_name,count(id) from crm_lead where stage_id_name='Admitted' AND create_date >= '%s' AND create_date <= '%s' group by team_id_name;"""%(month3,month2)
        print"admitedd data1", retrieve_admitted_data1
        self.env.cr.execute(retrieve_admitted_data1)
        admitted_data1 = self._cr.dictfetchall()
        for rec in admitted_data1:
            dict1[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": "Quarterly"}
        dict1['month'] = var.get('month', False)
        admitted_quaterly.append(dict1)
        print"diccttttt", dict1

        retrieve_admitted_data2 = """select team_id_name,count(id) from crm_lead where stage_id_name='Admitted' AND create_date >= '%s' AND create_date <= '%s' group by team_id_name;""" % (
        month2, month1)
        print"admitedd data2", retrieve_admitted_data2
        self.env.cr.execute(retrieve_admitted_data2)
        admitted_data2 = self._cr.dictfetchall()
        for rec in admitted_data2:
            dict2[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": "Quarterly"}
        dict2['month'] = var.get('month', False)
        admitted_quaterly.append(dict2)
        print"diccttttt", dict2

        retrieve_admitted_data3 = """select team_id_name,count(id) from crm_lead where stage_id_name='Admitted' AND create_date >= '%s' AND create_date <= '%s' group by team_id_name;""" % (
        month1, current_date)
        print"admitedd data3",retrieve_admitted_data3
        self.env.cr.execute(retrieve_admitted_data3)
        admitted_data3 = self._cr.dictfetchall()
        for rec in admitted_data3:
            dict3[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": "Quarterly"}
        dict3['month'] = var.get('month', False)
        admitted_quaterly.append(dict3)
        print"diccttttt", dict3


        if len(admitted_quaterly) == 0:
            return 'None'
        else:

        retrieve_current_month_leads_data = """select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' group by p.product_name ORDER BY count desc limit 3 ;"""
        self.env.cr.execute(retrieve_current_month_leads_data)
        current_month_data = self.env.cr.dictfetchall()
        count=0
        for item in current_month_data:
            if count==0:
                item.update({"color": "#FF0F00"})
            if count==1:
                item.update({"color": "#F8FF01"})
            if count==2:
                item.update({"color": "#0D52D1"})
            count= count + 1
            if count==3:
                break

    @api.model
    def retrieve_health_sec_per_faculty(self):


        dict={}
        health_sci_per_faculty=[]
        retrieve_health_sec_per_faculty = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1  group by c.team_id_name ORDER BY count desc limit 5 ;
"""
        self.env.cr.execute(retrieve_health_sec_per_faculty)
        health_science= self._cr.dictfetchall()
        for rec in health_science:
            dict[rec.get('team_id_name', False)] = rec.get('count', False)
        var2={"faculty":"Health Science"}
        dict['faculty'] = var2.get('faculty', False)
        health_sci_per_faculty.append(dict)
        print"diccttttt", dict


        if len(health_sci_per_faculty) == 0:
            return 'None'
        else:
            print"local_per_facultylocal_per_facultylocal_per_facultylocal_per_faculty",health_sci_per_faculty
            return health_sci_per_faculty

    @api.model
    def retrieve_it_dept_per_faculty(self):
        dict={}
        it_dept_per_faculty = []
        retrieve_it_dept_per_faculty = """select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2  group by c.team_id_name ORDER BY count desc limit 5"""
        self.env.cr.execute(retrieve_it_dept_per_faculty)
        It_deptarment= self._cr.dictfetchall()
        for rec in It_deptarment:
            dict[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"faculty": "IT Department"}
        dict['faculty'] = var2.get('faculty', False)
        it_dept_per_faculty.append(dict)
        print"diccttttt", dict


        if len(it_dept_per_faculty) == 0:
            return 'None'
        else:
            print"local_per_facultylocal_per_facultylocal_per_facultylocal_per_faculty", it_dept_per_faculty
            return it_dept_per_faculty

    @api.model
    def retrieve_bussines_acc_per_faculty(self):
        dict = {}
        buss_acc_per_faculty = []
        retrieve_bussines_acc_per_faculty = """select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3  group by c.team_id_name ORDER BY count desc limit 5"""
        self.env.cr.execute(retrieve_bussines_acc_per_faculty)
        bussiness_account = self._cr.dictfetchall()
        for rec in bussiness_account:
            dict[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"faculty": "Business Account"}
        dict['faculty'] = var2.get('faculty', False)
        buss_acc_per_faculty.append(dict)
        print"diccttttt", dict

        if len(buss_acc_per_faculty) == 0:
            return 'None'
        else:
            print"local_per_facultylocal_per_facultylocal_per_facultylocal_per_faculty", buss_acc_per_faculty
            return buss_acc_per_faculty


    @api.model
    def retrieve_current_health_opportunity_data(self):
        dict1 = {}
        dict2 = {}
        dict3 = {}
        dict4 = {}
        health_opportunity = []
        today = datetime.today()
        today1=datetime.today().strftime('%Y-%m-%d')
        datem2 = datetime(today.year, today.month, 1)
        datem1 = datetime(today.year, today.month, 1).strftime('%Y-%m-%d')
        print type(datem1)
        cal = Calendar()  # week starts Monday
        # cal = Calendar(6) # week stars Sunday

        first_date_month = datetime.today().replace(day=1).strftime('%Y-%m-%d')
        current_date = datetime.today().strftime('%Y-%m-%d')

        retrieve_current_health_opportunity_data = """select c.stage_id_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='opportunity' group by c.type,c.stage_id_name ORDER BY count;"""
        self.env.cr.execute(retrieve_current_health_opportunity_data)
        current_health_oppo_data = self.env.cr.dictfetchall()
        count = 0
        for item in current_health_oppo_data:
            if count == 0:
                item.update({"color": "#FF0F00"})
            if count == 1:
                item.update({"color": "#F8FF01"})
            if count == 2:
                item.update({"color": "#0D52D1"})
            count = count + 1
            if count == 3:
                break
        week4 = week3 - relativedelta(days=7)

        print type(weeks)

        retrieve_health_opporunity_local_week1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;"""%(week3,week4)
        print("health_opportunity1",retrieve_health_opporunity_local_week1)
        self.env.cr.execute(retrieve_health_opporunity_local_week1)
        health_opportunity_local_week1 = self._cr.dictfetchall()
        print("")
        for rec in health_opportunity_local_week1:
            dict1[rec.get('team_id_name', False)] = rec.get('count', False)
        var2={"week":"week 4"}
        dict1['week'] = var2.get('week', False)

        health_opportunity.append(dict1)
        print"diccttttt", dict1
        retrieve_health_opporunity_local_week2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;"""%(week2,week3)
        print("health_opportunity2", retrieve_health_opporunity_local_week2)
        self.env.cr.execute(retrieve_health_opporunity_local_week2)
        health_opportunity_local_week2 = self._cr.dictfetchall()
        for rec in health_opportunity_local_week2:
            dict2[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 3"}
        dict2['week'] = var2.get('week', False)
        health_opportunity.append(dict2)
        print"diccttttt", dict2

        retrieve_health_opporunity_local_week3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (week1, week2)
        print("health_opportunity3", retrieve_health_opporunity_local_week3)
        self.env.cr.execute(retrieve_health_opporunity_local_week3)
        health_opportunity_local_week3 = self._cr.dictfetchall()
        for rec in health_opportunity_local_week3:
            dict3[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 2"}
        dict3['week'] = var2.get('week', False)
        health_opportunity.append(dict3)
        print"diccttttt", dict3

        retrieve_health_opporunity_local_week4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        today1, week1)
        print("health_opportunity4", retrieve_health_opporunity_local_week4)
        self.env.cr.execute(retrieve_health_opporunity_local_week3)
        health_opportunity_local_week4 = self._cr.dictfetchall()
        for rec in health_opportunity_local_week4:
            dict4[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 1"}
        dict4['week'] = var2.get('week', False)
        health_opportunity.append(dict4)
        print"diccttttt", dict4

        if len(health_opportunity) == 0:
            return 'None'
        else:
            print("adasdfsfsdfdsfsd", current_health_oppo_data)
            return current_health_oppo_data

    @api.model
    def retrieve_health_opporunity_months(self):
        month_1 = {}
        month_2= {}
        month_3 = {}
        month_4 = {}
        month_5 = {}
        month_6 = {}
        health_opportunity_months = []
        current_date = datetime.now()
        month1 = current_date - relativedelta(months=1)
        month_name1= month1.strftime("%b")
        print month_name1
        month2 = month1 - relativedelta(months=1)
        month_name2 = month2.strftime("%b")

        print month_name2
        month3 = month2 - relativedelta(months=1)
        month_name3 = month3.strftime("%b")
        print month_name3
        month4 = month3 - relativedelta(months=1)
        month_name4 = month4.strftime("%b")
        print  month_name4
        month5 = month4 - relativedelta(months=1)
        month_name5 = month5.strftime("%b")

        print month_name5
        month6 = month5 - relativedelta(months=1)
        month_name6 = month6.strftime("%b")
        print month_name6

        month7 = month6 - relativedelta(months=1)
        month_name7 = month7.strftime("%b")
        print month_name7
        month8 = month7 - relativedelta(months=1)
        month_name8 = month8.strftime("%b")

        print month_name8
        month9 = month8 - relativedelta(months=1)
        month_name9 = month9.strftime("%b")
        print month_name9
        month10 = month9 - relativedelta(months=1)
        month_name10 = month10.strftime("%b")
        print  month_name10
        month11 = month10 - relativedelta(months=1)
        month_name11 = month10.strftime("%b")

        retrieve_health_opporunity_local_month1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (month5, month6)
        print("rettrerjrfoeroeroereor", retrieve_health_opporunity_local_month1)
        self.env.cr.execute(retrieve_health_opporunity_local_month1)
        health_opportunity_local_months1 = self._cr.dictfetchall()
        print("health_opportunity_month6", health_opportunity_local_months1)
        for rec in health_opportunity_local_months1:
            month_1[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name6}
        month_1['month']=var.get('month',False)
        health_opportunity_months.append(month_1)

        retrieve_monthly_leads_data2 = """ select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date<='%s' group by p.product_name ORDER BY count desc limit 2 ;""" % (
            month10, month11)
        print("rettrerjrfoeroeroereor", retrieve_monthly_leads_data2)
        self.env.cr.execute(retrieve_monthly_leads_data2)
        monthly_leads_month2 = self._cr.dictfetchall()

        retrieve_health_opporunity_local_month2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (month4, month5)
        print("health_opportunity_month5", retrieve_health_opporunity_local_month2)
        self.env.cr.execute(retrieve_health_opporunity_local_month2)
        health_opportunity_local_month2 = self._cr.dictfetchall()
        for rec in health_opportunity_local_month2:
            month_2[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name5}
        month_2['month'] = var.get('month', False)
        health_opportunity_months.append(month_2)
        print"diccttttt", month_2

        retrieve_health_opporunity_local_month3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (month3, month4)
        print("health_opportunity_month4", retrieve_health_opporunity_local_month3)
        self.env.cr.execute(retrieve_health_opporunity_local_month3)
        health_opportunity_local_month3 = self._cr.dictfetchall()
        for rec in health_opportunity_local_month3:
            month_3[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name4}
        month_3['month'] = var.get('month', False)
        health_opportunity_months.append(month_3)
        print"diccttttt", month_3

        retrieve_health_opporunity_local_month4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month2, month3)
        print("health_opportunity_month3", retrieve_health_opporunity_local_month4)
        self.env.cr.execute(retrieve_health_opporunity_local_month4)
        health_opportunity_local_month4 = self._cr.dictfetchall()
        for rec in health_opportunity_local_month4:
            month_4[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name3}
        month_4['month'] = var.get('month', False)
        health_opportunity_months.append(month_4)
        print"diccttttt", month_4

        retrieve_health_opporunity_local_month5 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month1, month2)
        print("health_opportunity_month2", retrieve_health_opporunity_local_month5)
        self.env.cr.execute(retrieve_health_opporunity_local_month5)
        health_opportunity_local_month5 = self._cr.dictfetchall()
        for rec in health_opportunity_local_month5:
            month_5[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name2}
        month_5['month'] = var.get('month', False)
        health_opportunity_months.append(month_5)
        print"diccttttt", month_5

        retrieve_health_opporunity_local_month6 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=1 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            current_date, month1)
        print("health_opportunity_month1", retrieve_health_opporunity_local_month6)
        self.env.cr.execute(retrieve_health_opporunity_local_month6)
        health_opportunity_local_month6 = self._cr.dictfetchall()
        for rec in health_opportunity_local_month6:
            month_6[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name1}
        month_6['month'] = var.get('month', False)
        health_opportunity_months.append(month_6)
        print"diccttttt", month_6

        if len(health_opportunity_months) == 0:
            return 'None'
        else:
            print "healthhhhhhhhhhhhhhhh", health_opportunity_months
            # print health_opportunity_inter
            return health_opportunity_months

    @api.model
    def retrieve_it_dept_weeks(self):
        dict1 = {}
        dict2 = {}
        dict3 = {}
        dict4 = {}
        IT_Dept = []
        today = datetime.today()
        today1 = datetime.today().strftime('%Y-%m-%d')
        datem2 = datetime(today.year, today.month, 1)
        datem1 = datetime(today.year, today.month, 1).strftime('%Y-%m-%d')
        print type(datem1)
        cal = Calendar()  # week starts Monday
        # cal = Calendar(6) # week stars Sunday

        print"diccttttt", dict3

        retrieve_monthly_leads_data4 = """ select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date<='%s' group by p.product_name ORDER BY count desc limit 2 ;""" % (
            month8, month9)
        print("rettrerjrfoeroeroereor", retrieve_monthly_leads_data4)
        self.env.cr.execute(retrieve_monthly_leads_data4)
        monthly_leads_month4 = self._cr.dictfetchall()
        week4 = week3 - relativedelta(days=7)

        for rec in monthly_leads_month4:
            dict4[rec.get('product_name', False)] = rec.get('count', False)
        var = {"month": month_name9}
        dict4['month'] = var.get('month', False)
        current_month_leads.append(dict4)

        retrieve_it_dept_local_week1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (week3, week4)
        print("retrieve_it_dept_local_week1", retrieve_it_dept_local_week1)
        self.env.cr.execute(retrieve_it_dept_local_week1)
        it_dept_local_week1 = self._cr.dictfetchall()
        print("")
        for rec in it_dept_local_week1:
            dict1[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 4"}
        dict1['week'] = var2.get('week', False)

        IT_Dept.append(dict1)
        print"diccttttt", dict1
        retrieve_it_dept_local_week2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        week2, week3)
        print("retrieve_it_dept_local_week2", retrieve_it_dept_local_week2)
        self.env.cr.execute(retrieve_it_dept_local_week2)
        it_dept_local_week2 = self._cr.dictfetchall()
        for rec in it_dept_local_week2:
            dict2[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 3"}
        dict2['week'] = var2.get('week', False)
        IT_Dept.append(dict2)
        print"diccttttt", dict2

        retrieve_it_dept_local_week3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        week1, week2)
        print("retrieve_it_dept_local_week3", retrieve_it_dept_local_week3)
        self.env.cr.execute(retrieve_it_dept_local_week3)
        it_dept_local_week3 = self._cr.dictfetchall()
        for rec in it_dept_local_week3:
            dict3[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 2"}
        dict3['week'] = var2.get('week', False)
        IT_Dept.append(dict3)
        print"diccttttt", dict3

        retrieve_it_dept_local_week4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        today, week1)
        print("retrieve_it_dept_local_week4", retrieve_it_dept_local_week4)
        self.env.cr.execute(retrieve_it_dept_local_week4)
        it_dept_local_week4 = self._cr.dictfetchall()
        for rec in it_dept_local_week4:
            dict4[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 1"}
        dict4['week'] = var2.get('week', False)
        IT_Dept.append(dict4)
        print"diccttttt", dict4

        if len(IT_Dept) == 0:
            return 'None'
        else:
            print "healthhhhhhhhhhhhhhhh", IT_Dept
            # print health_opportunity_inter
            return IT_Dept

    @api.model
    def retrieve_it_dept_months(self):
        month_1 = {}
        month_2 = {}
        month_3 = {}
        month_4 = {}
        month_5 = {}
        month_6 = {}
        IT_Dept_months = []
        current_date = datetime.now()
        month1 = current_date - relativedelta(months=1)
        month_name1 = month1.strftime("%b")
        print month1
        month2 = month1 - relativedelta(months=1)
        month_name2 = month2.strftime("%b")

        print month2
        month3 = month2 - relativedelta(months=1)
        month_name3 = month3.strftime("%b")
        print month3
        month4 = month3 - relativedelta(months=1)
        month_name4 = month4.strftime("%b")
        print  month4
        month5 = month4 - relativedelta(months=1)
        month_name5 = month5.strftime("%b")
        print month5
        month6 = month5 - relativedelta(months=1)
        month_name6 = month6.strftime("%b")
        print month6

        retrieve_it_dept_local_month1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month5, month6)
        print("retrieve_it_dept_local_month1", retrieve_it_dept_local_month1)
        self.env.cr.execute(retrieve_it_dept_local_month1)
        it_dept_local_months1 = self._cr.dictfetchall()
        print("")

        for rec in it_dept_local_months1:
            month_1[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name6}
        month_1['month'] = var.get('month', False)
        IT_Dept_months.append(month_1)

        retrieve_monthly_leads_data7 = """ select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date<='%s' group by p.product_name ORDER BY count desc limit 2 ;""" % (
            month5, month6)
        print("rettrerjrfoeroeroereor", retrieve_monthly_leads_data7)
        self.env.cr.execute(retrieve_monthly_leads_data7)
        monthly_leads_month7 = self._cr.dictfetchall()

        retrieve_it_dept_local_month2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        month4, month5)
        print("retrieve_it_dept_local_month2", retrieve_it_dept_local_month2)
        self.env.cr.execute(retrieve_it_dept_local_month2)
        it_dept_local_months2 = self._cr.dictfetchall()
        for rec in it_dept_local_months2:
            month_2[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name5}
        month_2['month'] = var.get('month', False)
        IT_Dept_months.append(month_2)
        print"diccttttt", month_2

        retrieve_it_dept_local_month3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
        month3, month4)
        print("retrieve_it_dept_local_month3", retrieve_it_dept_local_month3)
        self.env.cr.execute(retrieve_it_dept_local_month3)
        it_dept_local_months3 = self._cr.dictfetchall()
        for rec in it_dept_local_months3:
            month_3[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name4}
        month_3['month'] = var.get('month', False)
        IT_Dept_months.append(month_3)
        print"diccttttt", month_3

        retrieve_it_dept_local_month4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month2, month3)
        print("retrieve_it_dept_local_month4", retrieve_it_dept_local_month4)
        self.env.cr.execute(retrieve_it_dept_local_month4)
        it_dept_local_months4 = self._cr.dictfetchall()
        for rec in it_dept_local_months4:
            month_4[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name3}
        month_4['month'] = var.get('month', False)
        IT_Dept_months.append(month_4)
        print"diccttttt", month_4

        retrieve_it_dept_local_month5 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month1, month2)
        print("retrieve_it_dept_local_month5", retrieve_it_dept_local_month5)
        self.env.cr.execute(retrieve_it_dept_local_month5)
        it_dept_local_months5 = self._cr.dictfetchall()
        for rec in it_dept_local_months5:
            month_5[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name2}
        month_5['month'] = var.get('month', False)
        IT_Dept_months.append(month_5)
        print"diccttttt", month_5

        retrieve_it_dept_local_month6 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=2 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            current_date, month1)
        print("retrieve_it_dept_local_month6", retrieve_it_dept_local_month6)
        self.env.cr.execute(retrieve_it_dept_local_month6)
        it_dept_local_months6 = self._cr.dictfetchall()
        for rec in it_dept_local_months6:
            month_6[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name1}
        month_6['month'] = var.get('month', False)
        IT_Dept_months.append(month_6)
        print"diccttttt", month_6

        if len(IT_Dept_months) == 0:
            return 'None'
        else:
            print "healthhhhhhhhhhhhhhhh", IT_Dept_months
            # print health_opportunity_inter
            return IT_Dept_months

    @api.model
    def retrieve_bussines_acc_weeks(self):
        dict1 = {}
        dict2 = {}
        dict3 = {}
        dict4 = {}
        bussines_and_acc_weeks= []
        today = datetime.today()
        today1 = datetime.today().strftime('%Y-%m-%d')
        datem2 = datetime(today.year, today.month, 1)
        datem1 = datetime(today.year, today.month, 1).strftime('%Y-%m-%d')
        print type(datem1)
        cal = Calendar()  # week starts Monday
        # cal = Calendar(6) # week stars Sunday

        print"diccttttt", dict8

        retrieve_monthly_leads_data9 = """ select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date<='%s' group by p.product_name ORDER BY count desc limit 2 ;""" % (
            month3, month4)
        print("rettrerjrfoeroeroereor", retrieve_monthly_leads_data9)
        self.env.cr.execute(retrieve_monthly_leads_data9)
        monthly_leads_month9 = self._cr.dictfetchall()
        week4 = week3 -relativedelta(days=7)

        for rec in monthly_leads_month9:
            dict9[rec.get('product_name', False)] = rec.get('count', False)
        var = {"month": month_name4}
        dict9['month'] = var.get('month', False)
        current_month_leads.append(dict9)

        retrieve_bussines_acc_local_week1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            week3, week4)
        print("retrieve_bussines_acc_local_week1", retrieve_bussines_acc_local_week1)
        self.env.cr.execute(retrieve_bussines_acc_local_week1)
        business_acc_local_week1 = self._cr.dictfetchall()
        print("")
        for rec in business_acc_local_week1:
            dict1[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 4"}
        dict1['week'] = var2.get('week', False)
        bussines_and_acc_weeks.append(dict1)
        print"diccttttt", dict1

        retrieve_bussines_acc_local_week2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            week2, week3)
        print("retrieve_bussines_acc_local_week2", retrieve_bussines_acc_local_week2)
        self.env.cr.execute(retrieve_bussines_acc_local_week2)
        business_acc_local_week2 = self._cr.dictfetchall()
        for rec in business_acc_local_week2:
            dict2[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 3"}
        dict2['week'] = var2.get('week', False)
        bussines_and_acc_weeks.append(dict2)
        print"diccttttt", dict2

        retrieve_bussines_acc_local_week3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            week1, week2)
        print("retrieve_bussines_acc_local_week3", retrieve_bussines_acc_local_week3)
        self.env.cr.execute(retrieve_bussines_acc_local_week3)
        business_acc_local_week3 = self._cr.dictfetchall()
        for rec in business_acc_local_week3:
            dict3[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 2"}
        dict3['week'] = var2.get('week', False)
        bussines_and_acc_weeks.append(dict3)
        print"diccttttt", dict3

        retrieve_bussines_acc_local_week4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            today1, week1)
        print("retrieve_bussines_acc_local_week4", retrieve_bussines_acc_local_week4)
        self.env.cr.execute(retrieve_bussines_acc_local_week4)
        business_acc_local_week4 = self._cr.dictfetchall()
        for rec in business_acc_local_week4:
            dict4[rec.get('team_id_name', False)] = rec.get('count', False)
        var2 = {"week": "week 1"}
        dict4['week'] = var2.get('week', False)
        bussines_and_acc_weeks.append(dict4)
        print"diccttttt", dict4

        if len(bussines_and_acc_weeks) == 0:
            return 'None'
        else:
            print "healthhhhhhhhhhhhhhhh", bussines_and_acc_weeks
            # print health_opportunity_inter
            return bussines_and_acc_weeks

    @api.model
    def retrieve_bussines_acc_months(self):
        month_1 = {}
        month_2 = {}
        month_3 = {}
        month_4 = {}
        month_5 = {}
        month_6 = {}
        bussines_acc_months = []
        current_date = datetime.now()
        month1 = current_date - relativedelta(months=1)
        month_name1 = month1.strftime("%b")
        print month1
        month2 = month1 - relativedelta(months=1)
        month_name2 = month2.strftime("%b")
        print month2
        month3 = month2 - relativedelta(months=1)
        month_name3 = month3.strftime("%b")
        print month3
        month4 = month3 - relativedelta(months=1)
        month_name4 = month4.strftime("%b")
        print  month4
        month5 = month4 - relativedelta(months=1)
        month_name5 = month5.strftime("%b")
        print month5
        month6 = month5 - relativedelta(months=1)
        month_name6 = month6.strftime("%b")
        print month6

        retrieve_bussines_acc_local_month1 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month5, month6)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month1)
        self.env.cr.execute(retrieve_bussines_acc_local_month1)
        bussines_acc_local_months1 = self._cr.dictfetchall()
        print("")

        for rec in bussines_acc_local_months1:
            month_1[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name6}
        month_1['month'] = var.get('month', False)
        bussines_acc_months.append(month_1)

        retrieve_monthly_leads_data12 = """ select p.product_name,count(c.id) from crm_lead c join product_detail p on c.product_id = p.id where type='lead' AND c.create_date >='%s' AND c.create_date<='%s' group by p.product_name ORDER BY count desc limit 2 ;""" % (
            month1, current_date)
        print("rettrerjrfoeroeroereor", retrieve_monthly_leads_data12)
        self.env.cr.execute(retrieve_monthly_leads_data12)
        monthly_leads_month12 = self._cr.dictfetchall()

        retrieve_bussines_acc_local_month2 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month4, month5)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month2)
        self.env.cr.execute(retrieve_bussines_acc_local_month2)
        bussines_acc_local_months2 = self._cr.dictfetchall()
        for rec in bussines_acc_local_months2:
            month_2[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name5}
        month_2['month'] = var.get('month', False)
        bussines_acc_months.append(month_2)
        print"diccttttt", month_2

        retrieve_bussines_acc_local_month3 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month3, month4)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month3)
        self.env.cr.execute(retrieve_bussines_acc_local_month3)
        bussines_acc_local_months3 = self._cr.dictfetchall()
        for rec in bussines_acc_local_months3:
            month_3[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name4}
        month_3['month'] = var.get('month', False)
        bussines_acc_months.append(month_3)
        print"diccttttt", month_3

        retrieve_bussines_acc_local_month4 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month2, month3)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month4)
        self.env.cr.execute(retrieve_bussines_acc_local_month4)
        bussines_acc_local_months4 = self._cr.dictfetchall()
        for rec in bussines_acc_local_months4:
            month_4[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name3}
        month_4['month'] = var.get('month', False)
        bussines_acc_months.append(month_4)
        print"diccttttt", month_4

        retrieve_bussines_acc_local_month5 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            month1, month2)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month5)
        self.env.cr.execute(retrieve_bussines_acc_local_month5)
        bussines_acc_local_months5 = self._cr.dictfetchall()
        for rec in bussines_acc_local_months5:
            month_5[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name2}
        month_5['month'] = var.get('month', False)
        bussines_acc_months.append(month_5)
        print"diccttttt", month_5

        retrieve_bussines_acc_local_month6 = """ select c.team_id_name,count(p.faculty_id) from crm_lead c join program_details p on c.program = p.id where p.faculty_id=3 AND c.create_date <= '%s'  AND c.create_date >= '%s' group by c.team_id_name ORDER BY count desc limit 5 ;""" % (
            current_date, month1)
        print("rettrerjrfoeroeroereor", retrieve_bussines_acc_local_month6)
        self.env.cr.execute(retrieve_bussines_acc_local_month6)
        bussines_acc_local_months6 = self._cr.dictfetchall()
        for rec in bussines_acc_local_months6:
            month_6[rec.get('team_id_name', False)] = rec.get('count', False)
        var = {"month": month_name1}
        month_6['month'] = var.get('month', False)
        bussines_acc_months.append(month_6)
        print"diccttttt", month_6

        if len(bussines_acc_months) == 0:
            return 'None'
        else:
            print "healthhhhhhhhhhhhhhhh", current_month_leads
            # print health_opportunity_inter
            return current_month_leads



