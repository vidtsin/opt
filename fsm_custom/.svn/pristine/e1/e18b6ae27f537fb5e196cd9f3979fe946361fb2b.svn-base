from odoo import api, fields, models, SUPERUSER_ID, _

class FieldsProjectTask(models.Model):
    _inherit = 'project.task'

    copy_check = fields.Boolean('Copy Check', help='True once Additional Site Visit menu is clicked')
    # job_seq = fields.Char('Job Sequence')
    job_name = fields.Many2one('project.task','Job Name')
    dob = fields.Date('Date of birth')
    mobile_no = fields.Char('Mobile No.')
    product_location = fields.Selection([('vendor_wh', 'Vendor WH'), ('cg_wh', 'CG WH'),('customer_site', 'Customer Site'),
                                         ('multiple_location', 'Multiple locations')], string='Product Location')

    site_cross_street = fields.Text('Site Cross Street')
    order_no = fields.Integer('Order Number')
    product_availability_date = fields.Date('Product Availability Date')
    rma_rmt_no = fields.Integer('RMA/RMT Number')
    property_type = fields.Selection(
        [('single family', 'Single Family'), ('Townhome', 'Townhome'), ('Duplex', 'Duplex'),
         ('Hi-rise', 'Hi-rise'), ('Other', 'Other')], string='Type of Property')
    sale_ord = fields.Char('Sale Order', help='Copy of related sale order No.')
    give_rating = fields.Selection([('1', 'Unhappy'),('2', 'Good'),('3', 'Average'),('4', 'Satisfied'),('5', 'Happy'),
                                ('6', 'Very Happy')], string="Rating", default='1')

    give_feedback = fields.Text('Feedback', help="Reason of the rating")
    give_signature = fields.Char('Signature')

    image_o2m = fields.One2many('image.line', 'image_m2o', string='Image Line')
    # image_set = fields.Binary(string='Image')

    child_count = fields.Integer(string="Child Jobs", compute='compute_job_count')
    #
    # child_ids = fields.One2many('project.task.display', 'child_project', string='Child ID' )

    # @api.multi
    # def compute_job_count(self):










    driveway_type = fields.Selection([('Concrete', 'Concrete'), ('Gravel/Rock', 'Gravel/Rock'), ('Other', 'Other')], string='Driveway Type/Condition')
    high_rise_acc = fields.Selection([('Elevator', 'Elevator'), ('Loading', 'Loading'), ('Dock', 'Dock'), ('steps', 'Steps')], string='High-rise Access')
    type_of_flooring = fields.Selection([('Tile', 'Tile'), ('Wood', 'Wood'), ('Concrete', 'Concrete')], string='Type of Flooring')
    number_of_steps = fields.Integer('Number of steps')
    number_of_landing = fields.Integer('Number of landings')
    cabinets_installed = fields.Boolean('Cabinet Installed')
    counter_tops_installed = fields.Boolean('Counter-tops Installed')
    back_splash_installed = fields.Boolean('Backsplash Installed')
    gas_installed = fields.Boolean('Gas Installed')
    electrical_complete = fields.Boolean('Electrical Complete')
    plumbing_complete = fields.Boolean('Plumbing Complete')
    fix_repairs = fields.Text('Fix/Repair Install Others')

    dishwasher = fields.Boolean('Check All')
    appliance_secure_1 = fields.Boolean('Appliance Secured', related='dishwasher')
    supply_line_connected_1 = fields.Boolean('Supply Line Connected', related='dishwasher' )
    checked_function_1 = fields.Boolean('Checked Function', related='dishwasher')
    operation_explained_1 = fields.Boolean('Operation Explained', related='dishwasher')
    drain_connected_1 = fields.Boolean('Drain Connected', related='dishwasher')
    tci = fields.Boolean('Toe Click Installed', related='dishwasher')
    packing_material_removed_1 = fields.Boolean('Packing Material Removed', related='dishwasher')

    washer = fields.Boolean('Check All')
    appliance_secure_2 = fields.Boolean('Appliance Secured', related='washer')
    supply_line_connected_2 = fields.Boolean('Supply Line Connected', related='washer')
    checked_function_2 = fields.Boolean('Checked Function', related='washer')
    operation_explained_2 = fields.Boolean('Operation Explained',  related='washer')
    drain_connected_2 = fields.Boolean('Drain Connected',  related='washer')
    shipping_struts_removed_2 = fields.Boolean('Shipping Struts Removed',  related='washer')
    packing_material_removed_2 = fields.Boolean('Packing Material Removed',  related='washer')

    dryer = fields.Boolean('Check All')
    appliance_secure_3 = fields.Boolean('Appliance Secured', related='dryer')
    supply_line_connected_3 = fields.Boolean('Supply Line Connected', related='dryer' )
    checked_function_3 =  fields.Boolean('Checked Function', related='dryer')
    operation_explained_3= fields.Boolean('Operation Explained', related='dryer')
    drain_connected_3 = fields.Boolean('Drain Connected',related='dryer')
    shipping_struts_removed_3 = fields.Boolean('Shipping Struts Removed',related='dryer')
    packing_material_removed_3 = fields.Boolean('Packing Material Removed', related='dryer')

    cooktop = fields.Boolean('Check All')
    appliance_secure_4 = fields.Boolean('Appliance Secured', related='cooktop')
    electrical_connected_4 = fields.Boolean('Electrical Connected', related='cooktop' )
    gas_connected_4 = fields.Boolean('Gas Connected', related='cooktop')
    operation_explained_4 = fields.Boolean('Operation Explained', related='cooktop')
    all_bnr_ignite_4 = fields.Boolean('All Burners Ignite', related='cooktop')
    packing_material_removed_4 = fields.Boolean('Packing Material Removed', related='cooktop')
    grates_knob_4 =  fields.Boolean('Grates & Knob Present', related='cooktop')

    range = fields.Boolean('Check All')
    appliance_secure_5 = fields.Boolean('Appliance Secured',related='range' )
    electrical_connected_5 = fields.Boolean('Electrical Connected', related='range')
    gas_connected_5 = fields.Boolean('Gas Connected', related='range')
    operation_explained_5 = fields.Boolean('Operation Explained', related='range')
    all_bnr_ignite_5 = fields.Boolean('All Burners Ignite', related='range')
    packing_material_removed_5 = fields.Boolean('Packing Material Removed', related='range')
    grates_knob_5 = fields.Boolean('Grates & Knob Present', related='range')

    downdraft = fields.Boolean('Check All')
    appliance_secure_6 = fields.Boolean('Appliance Secured', related='downdraft' )
    raise_lowers_6 = fields.Boolean('Raise/Lowers', related='downdraft')
    remote_mounted_6 = fields.Boolean('Remote Mounted', related='downdraft')
    filters_installed_6 = fields.Boolean('Filters Installed',related='downdraft')
    electrical_connected_6 = fields.Boolean('Electrical Connected', related='downdraft')
    operation_explained_6 = fields.Boolean('Operation Explained', related='downdraft')
    packing_material_removed_6 = fields.Boolean('Packing Material Removed', related='downdraft')

    ice_machine = fields.Boolean('Check All')
    appliance_secure_7 = fields.Boolean('Appliance Secured', related='ice_machine')
    supply_line_connected_7 = fields.Boolean('Supply Line Connected',related='ice_machine' )
    drain_line_connected_7 = fields.Boolean('Drain Line Connected', related='ice_machine')
    functions_properly_7 = fields.Boolean('Functions  Properly', related='ice_machine')
    panel_installed_7 = fields.Boolean('Panel Installed', related='ice_machine')
    pump_working_7 = fields.Boolean('Pump Working', related='ice_machine')

    refrigerator =  fields.Boolean('Check All')
    appliance_secure_8 = fields.Boolean('Appliance Secured', related='refrigerator')
    anti_tip_mounted_8 = fields.Boolean('Anti Tip Mounted', related='refrigerator')
    electrical_connected_8 = fields.Boolean('Electrical Connected', related='refrigerator')
    water_line_connected_8 = fields.Boolean('Water Line Connected', related='refrigerator')
    operation_explained_8 = fields.Boolean('Operation Explained', related='refrigerator')
    water_purged_8 = fields.Boolean('Water Purged', related='refrigerator')
    ice_maker_on_8 = fields.Boolean('Ice Maker On', related='refrigerator')

    freezer = fields.Boolean('Check All')
    appliance_secure_9 = fields.Boolean('Appliance Secured', related='freezer')
    anti_tip_mounted_9 = fields.Boolean('Anti Tip Mounted',related='freezer' )
    electrical_connected_9 = fields.Boolean('Electrical Connected',related='freezer')
    water_line_connected_9 = fields.Boolean('Water Line Connected', related='freezer')
    operation_explained_9 = fields.Boolean('Operation Explained', related='freezer')
    water_purged_9 = fields.Boolean('Water Purged', related='freezer')
    ice_maker_on_9 = fields.Boolean('Ice Maker On', related='freezer')

    hood = fields.Boolean('Check All')
    appliance_secure_10 = fields.Boolean('Appliance Secured', related='hood')
    electrical_connected_10 = fields.Boolean('Electrical Connected', related='hood')
    duct_connected_sealed_10 = fields.Boolean('Duct Connected & Sealed', related='hood')
    functions_properly_10 = fields.Boolean('Functions  Properly', related='hood')
    packing_material_removed_10 = fields.Boolean('Packing Material Removed', related='hood')
    grates_installed_10 = fields.Boolean('Grates Installed', related='hood')
    flow_test_10 = fields.Boolean('Flow Test', related='hood')

    microwave_oven = fields.Boolean('Check All')
    trim_kit_open_11 = fields.Boolean('Trim Kit Installed/Open Closes', related='microwave_oven')
    appliance_secure_11 = fields.Boolean('Appliance Secured',related='microwave_oven')
    electrical_connected_11 = fields.Boolean('Electrical Connected', related='microwave_oven')
    trim_kit_11 = fields.Boolean('Trim Kit Installed', related='microwave_oven')
    packing_material_removed_11 = fields.Boolean('Packing Material Removed', related='microwave_oven')
    operation_explained_11 = fields.Boolean('Operation Explained', related='microwave_oven')
    open_closes_11 = fields.Boolean('Opens/Closes', related='microwave_oven')
    functions_properly_11 = fields.Boolean('Functions  Properly', related='microwave_oven')

    other = fields.Boolean('Check All')
    appliance_secure_12 = fields.Boolean('Appliance Secured', related='other')
    power_water_12 = fields.Boolean('Power Water', related='other')
    trim_kit_12 = fields.Boolean('Trim Kit Installed', related='other')
    operation_explained_12 = fields.Boolean('Operation Explained', related='other')
    packing_material_removed_12 = fields.Boolean('Packing Material Removed', related='other')

    description = fields.Text('Description')





    @api.multi
    def compute_job_count(self):
        self.child_count =0
        task_env = self.env['project.task']
        count = task_env.search([('job_name','=', self.id)])
        for jobs in count:
            self.child_count += 1

    @api.multi
    def fsm_button(self):
        return {

            'name': _('Child Jobs'),
            'type': 'ir.actions.act_window',
            'res_model': 'project.task',
            'view_mode': 'kanban,tree,form,calendar,pivot,graph',
            'target': 'current',
            'domain': [('job_name','=', self.id)]
        }

    @api.multi
    def sale_button(self):

        ord_obj = self.env['sale.order'].search([('name', '=', self.sale_ord)])

        # view = self.env.ref('sale.view_order_form')


        return {
            'name': _('Sale Order'),
            'type': 'ir.actions.act_window',
            'res_model': 'sale.order',
            'view_type': 'form',
            'view_mode': 'form',
            # 'views': [(view.id, 'form')],
            # 'view_id': view.id,
            'target': 'current',
            # 'domain': [('name', '=', self.sale_ord)],
            'res_id': ord_obj.id,

        }

    @api.multi
    def copy_custom(self,  default=None):
        if default is None:
            default = {}
        if not default.get('name'):
            default['name'] = _("%s (copy)") % self.name
        if 'remaining_hours' not in default:
            default['remaining_hours'] = self.planned_hours
        if not default.get('copy_check'):
            default['copy_check'] = True
        if not default.get('job_name'):
            default['job_name'] = self.id
        return super(FieldsProjectTask, self).copy(default)

    # @api.model
    # def default_get(self, fields):
    #     pes = super(FieldsProjectTask, self).default_get(fields)
    #     context = self._context
    #     active_ids = context.get('active_ids')
    #     pes.update({'copy_check':True})
    #     return pes


    #
    # @api.multi
    # def copy_relate(self):
    #     task_env = self.env['project.sub_task']
    #     count = task_env.search([('task_ref', '=', self.id)])


    # @api.onchange('dishwasher')
    # def onchange_this(self):
    #     for record in self:
    #         if record.dishwasher == True:
    #             record.appliance_secure_1 = True
    #             record.supply_line_connected_1 = True
    #         else:
    #             record.appliance_secure_1 =  False


#########################################################################################################################
class ImageDisplayLine(models.Model):
    _name = 'image.line'

    image_m2o = fields.Many2one('project.task')
    # name = fields.Char('Name')
    # age = fields.Integer('Age')
    db_datas = fields.Binary('Database Data')
    store_fname = fields.Char('Stored Filename')
    # image_set = fields.Many2many(comodel_name="ir.attachment", relation="std_doc_attach_rel", column1='stud_id',
    #                                  column2='attach_id', string="Student Docs")

    image_set = fields.Binary(string='Image')




# class ProjectTaskDisplay(models.Model):
#     _name = 'project.task.display'
#
#     child_project = fields.Many2one('project.task')













class FieldsCustomer(models.Model):
    _inherit = 'res.partner'

    property_contact = fields.Many2one('res.partner', string='Property Contact')


