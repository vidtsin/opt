from odoo import api, fields, models, SUPERUSER_ID, _
import base64

class FieldsProjectTask(models.Model):
    _inherit = 'project.task'

    copy_check = fields.Boolean('Copy Check', help='True once Additional Site Visit menu is clicked')
    # job_seq = fields.Char('Job Sequence')
    parent_name = fields.Many2one('project.task','Parent Name')
    dob = fields.Date('Date of birth')
    mobile_no = fields.Char('Mobile No.')
    product_location = fields.Selection([('vendor_wh', 'Vendor WH'), ('cg_wh', 'CG WH'),('customer_site', 'Customer Site'),
                                         ('multiple_location', 'Multiple locations')], string='Product Location')

    site_cross_street = fields.Text('Site Cross Street')
    order_no = fields.Integer('Order Number')
    product_availability_date = fields.Date('Product Availability Date')
    rma_rmt_no = fields.Integer('RMA/RMT Number')
    property_type = fields.Selection(
        [('single family', 'Single Family'), ('Townhome', 'Townhome'), ('Duplex', 'Duplex'),
         ('Hi-rise', 'Hi-rise'), ('Other', 'Other')], string='Type of Property')
    sale_ord = fields.Char('Sale Order', help='Copy of related sale order No.')
    give_rating = fields.Selection([('1', 'Unhappy'),('2', 'Good'),('3', 'Average'),('4', 'Satisfied'),('5', 'Happy')], string="Rating")

    give_feedback = fields.Text('Feedback', help="Reason of the rating")
    give_signature = fields.Char('Signature')

    image_o2m = fields.One2many('image.line', 'image_m2o', string='Image Line')
    # image_set = fields.Binary(string='Image')

    child_count = fields.Integer(string="Child Jobs", compute='compute_job_count')
    #
    # child_ids = fields.One2many('project.task.display', 'child_project', string='Child ID' )

    # @api.multi
    # def compute_job_count(self):

    driveway_type = fields.Selection([('Concrete', 'Concrete'), ('Gravel/Rock', 'Gravel/Rock'), ('Other', 'Other')], string='Driveway Type/Condition')
    high_rise_acc = fields.Selection([('Elevator', 'Elevator'), ('Loading', 'Loading'), ('Dock', 'Dock'), ('steps', 'Steps')], string='High-rise Access')
    type_of_flooring = fields.Selection([('Tile', 'Tile'), ('Wood', 'Wood'), ('Concrete', 'Concrete')], string='Type of Flooring')
    number_of_steps = fields.Integer('Number of steps')
    number_of_landing = fields.Integer('Number of landings')
    cabinets_installed = fields.Boolean('Cabinet Installed')
    counter_tops_installed = fields.Boolean('Counter-tops Installed')
    back_splash_installed = fields.Boolean('Backsplash Installed')
    gas_installed = fields.Boolean('Gas Installed')
    electrical_complete = fields.Boolean('Electrical Complete')
    plumbing_complete = fields.Boolean('Plumbing Complete')
    fix_repairs = fields.Text('Fix/Repair Install Others')

    dishwasher = fields.Boolean('Check All')
    appliance_secure_1 = fields.Boolean('Appliance Secured', related='dishwasher')
    supply_line_connected_1 = fields.Boolean('Supply Line Connected', related='dishwasher',)
    checked_function_1 = fields.Boolean('Checked Function', related='dishwasher', store=True)
    operation_explained_1 = fields.Boolean('Operation Explained', related='dishwasher', store=True)
    drain_connected_1 = fields.Boolean('Drain Connected', related='dishwasher', store=True)
    tci = fields.Boolean('Toe Click Installed', related='dishwasher', store=True)
    packing_material_removed_1 = fields.Boolean('Packing Material Removed', related='dishwasher', store=True)

    washer = fields.Boolean('Check All')
    appliance_secure_2 = fields.Boolean('Appliance Secured', related='washer', store=True)
    supply_line_connected_2 = fields.Boolean('Supply Line Connected', related='washer', store=True)
    checked_function_2 = fields.Boolean('Checked Function', related='washer', store=True)
    operation_explained_2 = fields.Boolean('Operation Explained',  related='washer', store=True)
    drain_connected_2 = fields.Boolean('Drain Connected',  related='washer', store=True)
    shipping_struts_removed_2 = fields.Boolean('Shipping Struts Removed',  related='washer', store=True)
    packing_material_removed_2 = fields.Boolean('Packing Material Removed',  related='washer', store=True)

    dryer = fields.Boolean('Check All')
    appliance_secure_3 = fields.Boolean('Appliance Secured', related='dryer', store=True)
    supply_line_connected_3 = fields.Boolean('Supply Line Connected', related='dryer', store=True )
    checked_function_3 =  fields.Boolean('Checked Function', related='dryer', store=True)
    operation_explained_3= fields.Boolean('Operation Explained', related='dryer', store=True)
    drain_connected_3 = fields.Boolean('Drain Connected',related='dryer', store=True)
    shipping_struts_removed_3 = fields.Boolean('Shipping Struts Removed',related='dryer', store=True)
    packing_material_removed_3 = fields.Boolean('Packing Material Removed', related='dryer', store=True)

    cooktop = fields.Boolean('Check All')
    appliance_secure_4 = fields.Boolean('Appliance Secured', related='cooktop', store=True)
    electrical_connected_4 = fields.Boolean('Electrical Connected', related='cooktop', store=True )
    gas_connected_4 = fields.Boolean('Gas Connected', related='cooktop', store=True)
    operation_explained_4 = fields.Boolean('Operation Explained', related='cooktop', store=True)
    all_bnr_ignite_4 = fields.Boolean('All Burners Ignite', related='cooktop', store=True)
    packing_material_removed_4 = fields.Boolean('Packing Material Removed', related='cooktop', store=True)
    grates_knob_4 =  fields.Boolean('Grates & Knob Present', related='cooktop', store=True)

    range = fields.Boolean('Check All')
    appliance_secure_5 = fields.Boolean('Appliance Secured',related='range', store=True )
    electrical_connected_5 = fields.Boolean('Electrical Connected', related='range', store=True)
    gas_connected_5 = fields.Boolean('Gas Connected', related='range', store=True)
    operation_explained_5 = fields.Boolean('Operation Explained', related='range', store=True)
    all_bnr_ignite_5 = fields.Boolean('All Burners Ignite', related='range', store=True)
    packing_material_removed_5 = fields.Boolean('Packing Material Removed', related='range', store=True)
    grates_knob_5 = fields.Boolean('Grates & Knob Present', related='range', store=True)

    downdraft = fields.Boolean('Check All')
    appliance_secure_6 = fields.Boolean('Appliance Secured', related='downdraft', store=True )
    raise_lowers_6 = fields.Boolean('Raise/Lowers', related='downdraft', store=True)
    remote_mounted_6 = fields.Boolean('Remote Mounted', related='downdraft', store=True)
    filters_installed_6 = fields.Boolean('Filters Installed',related='downdraft', store=True)
    electrical_connected_6 = fields.Boolean('Electrical Connected', related='downdraft', store=True)
    operation_explained_6 = fields.Boolean('Operation Explained', related='downdraft', store=True)
    packing_material_removed_6 = fields.Boolean('Packing Material Removed', related='downdraft', store=True)

    ice_machine = fields.Boolean('Check All')
    appliance_secure_7 = fields.Boolean('Appliance Secured', related='ice_machine', store=True)
    supply_line_connected_7 = fields.Boolean('Supply Line Connected',related='ice_machine', store=True )
    drain_line_connected_7 = fields.Boolean('Drain Line Connected', related='ice_machine', store=True)
    functions_properly_7 = fields.Boolean('Functions  Properly', related='ice_machine', store=True)
    panel_installed_7 = fields.Boolean('Panel Installed', related='ice_machine', store=True)
    pump_working_7 = fields.Boolean('Pump Working', related='ice_machine', store=True)

    refrigerator =  fields.Boolean('Check All')
    appliance_secure_8 = fields.Boolean('Appliance Secured', related='refrigerator', store=True)
    anti_tip_mounted_8 = fields.Boolean('Anti Tip Mounted', related='refrigerator', store=True)
    electrical_connected_8 = fields.Boolean('Electrical Connected', related='refrigerator', store=True)
    water_line_connected_8 = fields.Boolean('Water Line Connected', related='refrigerator', store=True)
    operation_explained_8 = fields.Boolean('Operation Explained', related='refrigerator', store=True)
    water_purged_8 = fields.Boolean('Water Purged', related='refrigerator', store=True)
    ice_maker_on_8 = fields.Boolean('Ice Maker On', related='refrigerator', store=True)

    freezer = fields.Boolean('Check All')
    appliance_secure_9 = fields.Boolean('Appliance Secured', related='freezer', store=True)
    anti_tip_mounted_9 = fields.Boolean('Anti Tip Mounted',related='freezer', store=True )
    electrical_connected_9 = fields.Boolean('Electrical Connected',related='freezer', store=True)
    water_line_connected_9 = fields.Boolean('Water Line Connected', related='freezer', store=True)
    operation_explained_9 = fields.Boolean('Operation Explained', related='freezer', store=True)
    water_purged_9 = fields.Boolean('Water Purged', related='freezer', store=True)
    ice_maker_on_9 = fields.Boolean('Ice Maker On', related='freezer', store=True)

    hood = fields.Boolean('Check All')
    appliance_secure_10 = fields.Boolean('Appliance Secured', related='hood', store=True)
    electrical_connected_10 = fields.Boolean('Electrical Connected', related='hood', store=True)
    duct_connected_sealed_10 = fields.Boolean('Duct Connected & Sealed', related='hood', store=True)
    functions_properly_10 = fields.Boolean('Functions  Properly', related='hood', store=True)
    packing_material_removed_10 = fields.Boolean('Packing Material Removed', related='hood', store=True)
    grates_installed_10 = fields.Boolean('Grates Installed', related='hood', store=True)
    flow_test_10 = fields.Boolean('Flow Test', related='hood', store=True)

    microwave_oven = fields.Boolean('Check All')
    trim_kit_open_11 = fields.Boolean('Trim Kit Installed/Open Closes', related='microwave_oven', store=True)
    appliance_secure_11 = fields.Boolean('Appliance Secured',related='microwave_oven', store=True)
    electrical_connected_11 = fields.Boolean('Electrical Connected', related='microwave_oven', store=True)
    trim_kit_11 = fields.Boolean('Trim Kit Installed', related='microwave_oven', store=True)
    packing_material_removed_11 = fields.Boolean('Packing Material Removed', related='microwave_oven', store=True)
    operation_explained_11 = fields.Boolean('Operation Explained', related='microwave_oven', store=True)
    open_closes_11 = fields.Boolean('Opens/Closes', related='microwave_oven', store=True)
    functions_properly_11 = fields.Boolean('Functions  Properly', related='microwave_oven', store=True)

    other = fields.Boolean('Check All')
    appliance_secure_12 = fields.Boolean('Appliance Secured', related='other', store=True)
    power_water_12 = fields.Boolean('Power Water', related='other', store=True)
    trim_kit_12 = fields.Boolean('Trim Kit Installed', related='other', store=True)
    operation_explained_12 = fields.Boolean('Operation Explained', related='other', store=True)
    packing_material_removed_12 = fields.Boolean('Packing Material Removed', related='other', store=True)

    description = fields.Text('Description')

    signature_damage = fields.Binary('Signature')
    many_image = fields.One2many('image.damage','damage_id',string='Image', attachment=True)
    text_damage = fields.Text('Description')


    @api.multi
    def compute_job_count(self):
        for id in self:
            id.child_count =0
            task_env = self.env['project.task']
            count = task_env.search([('parent_name','=', id.id)])
            for jobs in count:
                id.child_count += 1

    @api.multi
    def fsm_button(self):
        return {

            'name': _('Child Jobs'),
            'type': 'ir.actions.act_window',
            'res_model': 'project.task',
            'view_mode': 'kanban,tree,form,calendar,pivot,graph',
            'target': 'current',
            'domain': [('parent_name','=', self.id)]
        }

    @api.multi
    def sale_button(self):

        ord_obj = self.env['sale.order'].search([('name', '=', self.sale_ord)])

        # view = self.env.ref('sale.view_order_form')


        return {
            'name': _('Sale Order'),
            'type': 'ir.actions.act_window',
            'res_model': 'sale.order',
            'view_type': 'form',
            'view_mode': 'form',
            # 'views': [(view.id, 'form')],
            # 'view_id': view.id,
            'target': 'current',
            # 'domain': [('name', '=', self.sale_ord)],
            'res_id': ord_obj.id,

        }

    @api.multi
    def copy_custom(self,  default=None):
        if default is None:
            default = {}
        if not default.get('name'):
            default['name'] = _("%s (copy)") % self.name
        if 'remaining_hours' not in default:
            default['remaining_hours'] = self.planned_hours
        if not default.get('copy_check'):
            default['copy_check'] = True
        if not default.get('parent_name'):
            default['parent_name'] = self.id
        return super(FieldsProjectTask, self).copy(default)


    @api.multi
    def rating_feedback(self):
        rating = ''
        if self.give_rating == '1':
            rating = 'Unhappy'
        elif self.give_rating == '2':
            rating = 'Good'
        elif self.give_rating == '3':
            rating = 'Average'
        elif self.give_rating == '4':
            rating = 'Satisfied'
        elif self.give_rating == '5':
            rating = 'Happy'
        return rating

        # data = _('Dishwasher:%s </br ,Appliance Secured:%s </br, Appliance Secured:%s </br ,Appliance Secured:%s </br!!!!!') % (
        #     self.dishwasher, self.appliance_secure_1, appliance_secure_2, self.appliance_secure_3)

    # @api.multi
    # def installation_data(self):
    #     # data = _('Dishwasher:%s </br ,Appliance Secured:%s </br, Appliance Secured:%s </br ,Appliance Secured:%s </br!!!!!') % (
    #     #     self.dishwasher, self.appliance_secure_1, self.appliance_secure_2, self.appliance_secure_3)
    #     data = """
    #           Dishwasher: """ + str(self.dishwasher) or '' + """,
    #           Washer: """ + str(self.washer) or '' + """,
    #           Dryer: """ + str(self.dryer) or '' + """,
    #
    #
    #          Appliance Secured: """ + str(self.appliance_secure_1) or '' + """,
    #          Appliance Secured: """ + str(self.appliance_secure_2) or '' + """,
    #          Appliance Secured: """ + str(self.appliance_secure_3) or '' + """</td>
    #
    #          Supply Line Connected: """ + str(self.supply_line_connected_1) or '' + """</td>
    #          Supply Line Connected: """ + str(self.supply_line_connected_2) or '' + """</td>
    #          Supply Line Connected: """ + str(self.supply_line_connected_3) or '' + """</td>
    #
    #
    #           Checked Function: """ + str(self.checked_function_1) or '' + """
    #           Checked Function: """ + str(self.checked_function_2) or '' + """
    #            Checked Function: """ + str(self.checked_function_3) or '' + """
    #
    #
    #            #         <td>Operation Explained: """ + str(self.operation_explained_1) or '' + """</td>
    #            #         <td>Operation Explained: """ + str(self.operation_explained_2) or '' + """</td>
    #            #         <td>Operation Explained: """ + str(self.operation_explained_3) or '' + """</td>
    #            #     </tr>
    #            #     <tr>
    #            #         <td>Drain Connected: """ + str(self.drain_connected_1) or '' + """</td>
    #            #         <td>Drain Connected: """ + str(self.drain_connected_2) or '' + """</td>
    #            #         <td>Drain Connected: """ + str(self.drain_connected_3) or '' + """</td>
    #            #     </tr>
    #            #     <tr>
    #            #         <td>Toe Click Installed: """ + str(self.tci) or '' + """</td>
    #            #         <td>Shipping Struts Removed: """ + str(self.shipping_struts_removed_2) or '' + """</td>
    #            #         <td>Shipping Struts Removed: """ + str(self.shipping_struts_removed_3) or '' + """</td>
    #            #     </tr>
    #            #     <tr>
    #            #         <td>Packing Material Removed: """ + str(self.packing_material_removed_1) or '' + """</td>
    #            #         <td>Packing Material Removed: """ + str(self.packing_material_removed_2) or '' + """</td>
    #            #         <td>Packing Material Removed: """ + str(self.packing_material_removed_3) or '' + """</td>
    #            #     </tr>
    #            # </table>
    #        """
    #     return data


    # @api.multi
    # def installation_data(self):
    #     data = """
    #         <table>
    #             <tr>
    #                 <td>Dishwasher:""" + str(self.dishwasher) or '' + """</td>
    #                 <td>Washer: """ + str(self.washer) or '' + """</td>
    #                 <td>Dryer: """ + str(self.dryer) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Appliance Secured: """ + str(self.appliance_secure_1) or '' + """</td>
    #                 <td>Appliance Secured: """ + str(self.appliance_secure_2) or '' + """</td>
    #                 <td>Appliance Secured: """ + str(self.appliance_secure_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Supply Line Connected: """ + str(self.supply_line_connected_1) or '' + """</td>
    #                 <td>Supply Line Connected: """ + str(self.supply_line_connected_2) or '' + """</td>
    #                 <td>Supply Line Connected: """ + str(self.supply_line_connected_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Checked Function: """ + str(self.checked_function_1) or '' + """</td>
    #                 <td>Checked Function: """ + str(self.checked_function_2) or '' + """</td>
    #                 <td>Checked Function: """ + str(self.checked_function_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Operation Explained: """ + str(self.operation_explained_1) or '' + """</td>
    #                 <td>Operation Explained: """ + str(self.operation_explained_2) or '' + """</td>
    #                 <td>Operation Explained: """ + str(self.operation_explained_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Drain Connected: """ + str(self.drain_connected_1) or '' + """</td>
    #                 <td>Drain Connected: """ + str(self.drain_connected_2) or '' + """</td>
    #                 <td>Drain Connected: """ + str(self.drain_connected_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Toe Click Installed: """ + str(self.tci) or '' + """</td>
    #                 <td>Shipping Struts Removed: """ + str(self.shipping_struts_removed_2) or '' + """</td>
    #                 <td>Shipping Struts Removed: """ + str(self.shipping_struts_removed_3) or '' + """</td>
    #             </tr>
    #             <tr>
    #                 <td>Packing Material Removed: """ + str(self.packing_material_removed_1) or '' + """</td>
    #                 <td>Packing Material Removed: """ + str(self.packing_material_removed_2) or '' + """</td>
    #                 <td>Packing Material Removed: """ + str(self.packing_material_removed_3) or '' + """</td>
    #             </tr>
    #         </table>
    #     """
    #     return data
    @api.multi
    def send_install_email(self):
        self.ensure_one()
        ir_model_data = self.env['ir.model.data']
        installation_template_id=False
        try:
            compose_form_id = ir_model_data.get_object_reference('mail', 'email_compose_message_wizard_form')[1]
            # template_id = self.env['mail.template'].browse(compose_form_id)
            # template_id.write({'template_id':24})
            installation_template_id = self.env.ref('fsm_custom.email_template_installation_details_email').id
            # template_id.write({'template_id': installation_template_id})
        except ValueError:
            compose_form_id = False
        pdf=self.env['report'].sudo().get_pdf([self.id], 'fsm_custom.report_custom_template_install')

        image_line_ids = self.env['image.line'].search([('image_m2o', '=', self.id)]).ids
        attachment_ids = []
        attachment_ids.append(self.env['ir.attachment'].create({
            'name': self.name+'.pdf',
            'type': 'binary',
            'datas': base64.encodestring(pdf),
            'datas_fname':self.name+'.pdf',
            'res_model': 'project.task',
            'res_id': self.id,
            'mimetype': 'application/pdf'
        }).id)
        for rec in image_line_ids:
            attachment = self.env['ir.attachment'].search([('res_id', '=', rec), ('res_model', '=', 'image.line'),('res_field','=','image_set')])
            if attachment:
                attachment_ids.append(attachment.id)
        ctx = dict()
        ctx.update({
            'default_res_id': self.ids[0],
            'default_template_id': installation_template_id,
            'default_attachment_ids':attachment_ids,
        })

        return {
            'type': 'ir.actions.act_window',
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'mail.compose.message',
            'views': [(compose_form_id, 'form')],
            'view_id': compose_form_id,
            'target': 'new',
            'context': ctx,
        }

    @api.multi
    def send_damage_email(self):
        self.ensure_one()
        ir_model_data = self.env['ir.model.data']
        try:
            compose_form_id = ir_model_data.get_object_reference('mail', 'email_compose_message_wizard_form')[1]
            # template_id = self.env['mail.template'].browse(compose_form_id)
            demage_template_id=self.env.ref('fsm_custom.email_template_damages_details_email').id
            # template_id.write({'template_id': demage_template_id})
            # image_line_ids = self.env['image.line'].search([('damage_id', '=', self.id)]).ids
            # attachment_ids = []
            # attachment_ids.append(self.env['ir.attachment'].create({
            #     'name': self.name + '.pdf',
            #     'type': 'binary',
            #     'datas': base64.encodestring(pdf),
            #     'datas_fname': self.name + '.pdf',
            #     'res_model': 'project.task',
            #     'res_id': self.id,
            #     'mimetype': 'application/pdf'
            # }).id)
            # for rec in image_line_ids:
            #     attachment = self.env['ir.attachment'].search(
            #         [('res_id', '=', rec), ('res_model', '=', 'image.damage'), ('res_field', '=', 'damage_image')])
            #     if attachment:
            #         attachment_ids.append(attachment.id)
        except ValueError:
            compose_form_id = False
        pdf = self.env['report'].sudo().get_pdf([self.id], 'fsm_custom.report_custom_template_damage')

        image_line_ids = self.env['image.damage'].search([('damage_id', '=', self.id)]).ids
        attachment_ids = []
        attachment_ids.append(self.env['ir.attachment'].create({
            'name': self.name + '.pdf',
            'type': 'binary',
            'datas': base64.encodestring(pdf),
            'datas_fname': self.name + '.pdf',
            'res_model': 'project.task',
            'res_id': self.id,
            'mimetype': 'application/pdf'
        }).id)
        for rec in image_line_ids:
            attachment = self.env['ir.attachment'].search(
                [('res_id', '=', rec), ('res_model', '=', 'image.damage'), ('res_field', '=', 'damage_image')])
            if attachment:
                attachment_ids.append(attachment.id)
        ctx = dict()
        ctx.update({
            'default_res_id': self.ids[0],
            'default_template_id':demage_template_id,
            'default_attachment_ids': attachment_ids,

        })

        return {
            'type': 'ir.actions.act_window',
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'mail.compose.message',
            'views': [(compose_form_id, 'form')],
            'view_id': compose_form_id,
            'target': 'new',
            'context': ctx,
        }


    @api.multi
    def send_feedback_email(self):
        template_ids = self.env['ir.model.data'].get_object_reference('fsm_custom', 'email_template_feedback_email')[1]
        template_id = self.env['mail.template'].browse(template_ids)

        # template_id.write({'email_to': email})
        mail_id = template_id.send_mail(self.id, force_send=True)
        return True


#########################################################################################################################
class ImageDisplayLine(models.Model):
    _name = 'image.line'

    image_m2o = fields.Many2one('project.task')
    # name = fields.Char('Name')
    # age = fields.Integer('Age')
    db_datas = fields.Binary('Database Data')
    store_fname = fields.Char('Stored Filename')
    # image_set = fields.Many2many(comodel_name="ir.attachment", relation="std_doc_attach_rel", column1='stud_id',
    #                                  column2='attach_id', string="Student Docs")

    image_set = fields.Binary(string='Image',attachment=True)

class ImageDisplayDameg(models.Model):
    _name = 'image.damage'

    damage_id = fields.Many2one('project.task')
    store_fname = fields.Char('Stored Filename')

    damage_image = fields.Binary('Database Data', attachment=True)

class FieldsCustomer(models.Model):
    _inherit = 'res.partner'

    property_contact = fields.Many2one('res.partner', string='Property Contact')


